#ifndef ODRIVE_CAN_HEADER
#define ODRIVE_CAN_HEADER

#include <cstdint>
#include <climits>
#include <vector>
#include <string>

#include <linux/can.h>

namespace ODrive_CAN{

typedef std::uint8_t Uint8_t;
typedef std::int16_t Int16_t;
typedef std::uint16_t Uint16_t;
typedef std::uint32_t Uint32_t;
typedef float Float32_t;
static_assert(CHAR_BIT == 8, "Error: Byte is not 8-bit");        // This is unnecessary
static_assert(sizeof(float) == 4, "Error: Float is not 32-bit"); // This is incomplete. Does not check for IEEE-754 format

enum class COMMAND{
    GET_VERSION             = 0x000,
    HEARTBEAT               = 0x001,
    ESTOP                   = 0x002,
    GET_ERROR               = 0x003,
    RXSDO                   = 0x004,
    TXSDO                   = 0x005,
    ADDRESS                 = 0x006,
    SET_AXIS_STATE          = 0x007,
    GET_ENCODER_ESTIMATES   = 0x009,
    SET_CONTROLLER_MODE     = 0x00b,
    SET_INPUT_POS           = 0x00c,
    SET_INPUT_VEL           = 0x00d,
    SET_INPUT_TORQUE        = 0x00e,
    SET_LIMITS              = 0x00f,
    SET_TRAJ_VEL_LIMIT      = 0x011,
    SET_TRAJ_ACCEL_LIMITS   = 0x012,
    SET_TRAJ_INTERTIA       = 0x013,
    GET_IQ                  = 0x014,
    GET_TEMPERATURE         = 0x015,
    REBOOT                  = 0x016,
    GET_BUS_VOLTAGE_CURRENT = 0x017,
    CLEAR_ERRORS            = 0x018,
    SET_ABSOLUTE_POSITION   = 0x019,
    SET_POS_GAIN            = 0x01a,
    SET_VEL_GAINS           = 0x01b,
    GET_TORQUES             = 0x01c,
    GET_POWERS              = 0x01d,
    ENTER_DFU_MODE          = 0x01f,
    NONE
};

struct Heartbeat{
    Uint32_t axis_error;
    Uint8_t axis_state;
    Uint8_t procedure_result;
    Uint8_t trajectory_done_flag;
} __attribute__((packed));
struct Get_Version{
    Uint8_t protocol_version;
    Uint8_t hw_version_major;
    Uint8_t hw_version_minor;
    Uint8_t hw_version_variant;
    Uint8_t fw_version_major;
    Uint8_t fw_version_minor;
    Uint8_t fw_version_revision;
    Uint8_t fw_version_unreleased;
} __attribute__((packed));
struct Estop{} __attribute__((packed));
struct Get_Error{
    Uint32_t active_errors;
    Uint32_t disarm_reason;
} __attribute__((packed));
struct RxSdo{
    Uint8_t opcode;
    Uint16_t endpoint_id;
    Uint8_t reserved;
    Uint32_t value;
} __attribute__((packed));
struct TxSdo{
    Uint8_t reserved0;
    Uint16_t endpoint_id;
    Uint8_t reserved1;
    Uint32_t value;
} __attribute__((packed));
struct Address{
    Uint8_t node_id;
    // TODO: Find the endianness of this. This is going to cause problems
    // 48-bit integer
    Uint32_t serial_number_1;
    Uint16_t serial_number_2;
} __attribute__((packed));
struct Set_Axis_State{
    Uint32_t axis_requested_state;
} __attribute__((packed));
struct Get_Encoder_Estimates{
    Float32_t pos_estimate;
    Float32_t vel_estimate;
} __attribute__((packed));
struct Set_Controller_Mode{
    Uint32_t control_mode;
    Uint32_t input_mode;
} __attribute__((packed));
struct Set_Input_Pos{
    Float32_t input_pos;
    Int16_t vel_ff;
    Int16_t torque_ff;
} __attribute__((packed));
struct Set_Input_Vel{
    Float32_t input_vel;
    Float32_t input_torque_ff;
} __attribute__((packed));
struct Set_Input_Torque{
    Float32_t input_torque;
} __attribute__((packed));
struct Set_Limits{
    Float32_t velocity_limit;
    Float32_t current_limit;
} __attribute__((packed));
struct Set_Traj_Vel_Limit{
    Float32_t traj_accel_limit;
    Float32_t traj_decel_limit;
} __attribute__((packed));
struct Set_Traj_Accel_Limits{
    Float32_t traj_accel_limit;
    Float32_t traj_decel_limit;
} __attribute__((packed));
struct Set_Traj_Inertia{
    Float32_t traj_inertia;
} __attribute__((packed));
struct Get_Iq{
    Float32_t iq_setpoint;
    Float32_t iq_measured;
} __attribute__((packed));
struct Get_Temperature{
    Float32_t fet_temperature;
    Float32_t motor_temperature;
} __attribute__((packed));
struct Reboot{
    Uint8_t action;
};
struct Get_Bus_Voltage_Current{
    Float32_t bus_voltage;
    Float32_t bus_current;
} __attribute__((packed));
struct Clear_Errors{
    Uint8_t identify;
} __attribute__((packed));
struct Set_Absolute_Position{
    Float32_t position;
} __attribute__((packed));
struct Set_Pos_Gain{
    Float32_t pos_gain;
} __attribute__((packed));
struct Set_Vel_Gains{
    Float32_t vel_gain;
    Float32_t vel_integrator_gain;
} __attribute__((packed));
struct Get_Torques{
    Float32_t torque_target;
    Float32_t torque_estimate;
} __attribute__((packed));
struct Get_Powers{
    Float32_t electrical_power;
    Float32_t mechanical_power;
} __attribute__((packed));
struct Enter_DFU_Mode{} __attribute__((packed));

struct CAN_Frame{
    Uint8_t node_id;
    Uint8_t cmd_id;
    Uint8_t len;
    union{
        Get_Version get_version;
        Heartbeat heartbeat;
        Estop estop;
        RxSdo rxsdo;
        TxSdo txsdo;
        Address address;
        Set_Axis_State set_axis_state;
        Get_Encoder_Estimates get_encoder_estimates;
        Set_Controller_Mode set_controller_mode;
        Set_Input_Pos set_input_pos;
        Set_Input_Vel set_input_vel;
        Set_Input_Torque set_input_torque;
        Set_Limits set_limits;
        Set_Traj_Vel_Limit set_traj_vel_limit;
        Set_Traj_Accel_Limits set_traj_accel_limits;
        Set_Traj_Inertia set_traj_inertia;
        Get_Iq get_iq;
        Get_Temperature get_temperature;
        Reboot reboot;
        Get_Bus_Voltage_Current get_bus_voltage_current;
        Clear_Errors clear_errors;
        Set_Absolute_Position set_absolute_position;
        Set_Pos_Gain set_pos_gain;
        Set_Vel_Gains set_vel_gains;
        Get_Torques get_torques;
        Get_Powers get_powers;
        Enter_DFU_Mode enter_dfu_mode;
    } cmd;

    CAN_Frame() : node_id(-1), cmd_id((Uint8_t)COMMAND::NONE){}
};

void Clear_CAN_Bus(int can_socket);

CAN_Frame Read_CAN_Bus1(int can_socket);
std::vector<CAN_Frame> Read_CAN_Bus(int can_socket, std::size_t max = 1);

ssize_t Write_CAN_Bus1(int can_socket, const CAN_Frame& frame);
std::vector<ssize_t> Write_Can_Bus(int can_socket, const std::vector<CAN_Frame>& frames);

int Create_CAN_Socket();
int Bind_CAN_Socket(int can_socket, const std::string& can_id, sockaddr_can* out_addr = nullptr);
int Close_CAN_Socket(int can_socket);

}

#endif
